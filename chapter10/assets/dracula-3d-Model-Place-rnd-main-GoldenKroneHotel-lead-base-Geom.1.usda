#usda 1.0
(
    defaultPrim = "Origin"
    relocates = {
        </Origin/Basis_L/Basis_M_0>: </Origin/Basis_L/Basis_L_0>, 
        </Origin/Basis_L/Basis_M_1>: </Origin/Basis_L/Basis_L_1>, 
        </Origin/Basis_L/Basis_M_2>: </Origin/Basis_L/Basis_L_2>, 
        </Origin/Basis_L/Basis_M_3>: </Origin/Basis_L/Basis_L_3>, 
        </Origin/Basis_L/Basis_M_4>: </Origin/Basis_L/Basis_L_4>, 
        </Origin/Basis_L/Basis_M_5>: </Origin/Basis_L/Basis_L_5>, 
        </Origin/Basis_L/Basis_M_6>: </Origin/Basis_L/Basis_L_6>, 
        </Origin/Basis_L/Basis_M_7>: </Origin/Basis_L/Basis_L_7>, 
        </Origin/Basis_R/Basis_M_0>: </Origin/Basis_R/Basis_R_0>, 
        </Origin/Basis_R/Basis_M_1>: </Origin/Basis_R/Basis_R_1>, 
        </Origin/Basis_R/Basis_M_2>: </Origin/Basis_R/Basis_R_2>, 
        </Origin/Basis_R/Basis_M_3>: </Origin/Basis_R/Basis_R_3>, 
        </Origin/Basis_R/Basis_M_4>: </Origin/Basis_R/Basis_R_4>, 
        </Origin/Basis_R/Basis_M_5>: </Origin/Basis_R/Basis_R_5>, 
        </Origin/Basis_R/Basis_M_6>: </Origin/Basis_R/Basis_R_6>, 
        </Origin/Basis_R/Basis_M_7>: </Origin/Basis_R/Basis_R_7>
    }
)

def "Origin"
{
    def Xform "Basis_L" (
        prepend references = @dracula-3d-Geom-Shape-rnd-main-BasisLineup-lead-base-whole.1.usda@
    )
    {
        double3 xformOp:translate = (-4.333333333333333, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        over "Basis_L_0"
        {
            uniform token basis = "bezier"
            uniform bool doubleSided = 1
            normal3f[] normals = [(-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3)] (
                interpolation = "varying"
            )
            uniform token type = "cubic"
            float[] widths = [1] (
                interpolation = "constant"
            )
        }

        over "Basis_L_1"
        {
            uniform token basis = "bspline"
            uniform bool doubleSided = 1
            normal3f[] normals = [(-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3)] (
                interpolation = "varying"
            )
            uniform token type = "linear"
            float[] widths = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75] (
                interpolation = "varying"
            )
        }

        over "Basis_L_2"
        {
            uniform token basis = "catmullRom"
            uniform bool doubleSided = 1
            normal3f[] normals = [(-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3)] (
                interpolation = "varying"
            )
            uniform token type = "cubic"
            float[] widths = [0, 0.10714286, 0.21428572, 0.32142857, 0.42857143, 0.53571427, 0.64285713] (
                interpolation = "vertex"
            )
        }

        over "Basis_L_3"
        {
            uniform token basis = "bezier"
            uniform bool doubleSided = 1
            normal3f[] normals = [(-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3)] (
                interpolation = "varying"
            )
            uniform token type = "linear"
            float[] widths = [0.625] (
                interpolation = "constant"
            )
        }

        over "Basis_L_4"
        {
            uniform token basis = "bspline"
            uniform bool doubleSided = 1
            normal3f[] normals = [(-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3)] (
                interpolation = "varying"
            )
            uniform token type = "cubic"
            float[] widths = [0, 0.1, 0.2, 0.3, 0.4] (
                interpolation = "varying"
            )
        }

        over "Basis_L_5"
        {
            uniform token basis = "catmullRom"
            uniform bool doubleSided = 1
            normal3f[] normals = [(-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3)] (
                interpolation = "varying"
            )
            uniform token type = "linear"
            float[] widths = [0, 0.05357143, 0.10714286, 0.16071428, 0.21428572, 0.26785713, 0.32142857] (
                interpolation = "vertex"
            )
        }

        over "Basis_L_6"
        {
            uniform token basis = "bezier"
            uniform bool doubleSided = 1
            normal3f[] normals = [(-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3)] (
                interpolation = "varying"
            )
            uniform token type = "cubic"
            float[] widths = [0.25] (
                interpolation = "constant"
            )
        }

        over "Basis_L_7"
        {
            uniform token basis = "bspline"
            uniform bool doubleSided = 1
            normal3f[] normals = [(-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3), (-1, -0.3, 0.3)] (
                interpolation = "varying"
            )
            uniform token type = "linear"
            float[] widths = [0, 0.017857144, 0.035714287, 0.05357143, 0.071428575, 0.08928572, 0.10714286] (
                interpolation = "varying"
            )
        }
    }

    def Xform "Basis_R" (
        prepend references = @dracula-3d-Geom-Shape-rnd-main-BasisLineup-lead-base-whole.1.usda@
    )
    {
        double3 xformOp:translate = (2.3333333333333335, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        over "Basis_R_0"
        {
            uniform token basis = "bspline"
            uniform token type = "linear"
            float[] widths = [0, 0, 0, 0, 0, 0, 0] (
                interpolation = "vertex"
            )
        }

        over "Basis_R_1"
        {
            uniform token basis = "catmullRom"
            uniform token type = "cubic"
            float[] widths = [0.125] (
                interpolation = "constant"
            )
        }

        over "Basis_R_2"
        {
            uniform token basis = "bezier"
            uniform token type = "linear"
            float[] widths = [0, 0.035714287, 0.071428575, 0.10714286, 0.14285715, 0.17857143, 0.21428572] (
                interpolation = "varying"
            )
        }

        over "Basis_R_3"
        {
            uniform token basis = "bspline"
            uniform token type = "cubic"
            float[] widths = [0, 0.05357143, 0.10714286, 0.16071428, 0.21428572, 0.26785713, 0.32142857] (
                interpolation = "vertex"
            )
        }

        over "Basis_R_4"
        {
            uniform token basis = "catmullRom"
            uniform token type = "linear"
            float[] widths = [0.5] (
                interpolation = "constant"
            )
        }

        over "Basis_R_5"
        {
            uniform token basis = "bezier"
            uniform token type = "cubic"
            float[] widths = [0, 0.20833333, 0.41666666] (
                interpolation = "varying"
            )
        }

        over "Basis_R_6"
        {
            uniform token basis = "bspline"
            uniform token type = "linear"
            float[] widths = [0, 0.10714286, 0.21428572, 0.32142857, 0.42857143, 0.53571427, 0.64285713] (
                interpolation = "vertex"
            )
        }

        over "Basis_R_7"
        {
            uniform token basis = "catmullRom"
            uniform token type = "cubic"
            float[] widths = [0.875] (
                interpolation = "constant"
            )
        }
    }

    def "Ground" (
        displayName = "Ground"
        doc = "Main ground where Golden Krone exists"
        prepend references = @dracula-3d-Geom-Shape-rnd-main-GroundPlane-lead-base-whole.1.usda@
    )
    {
        uniform bool doubleSided = 1
    }

    def Sphere "Volume" (
        doc = "Main volume for Golden Krone"
    )
    {
        double radius = 2
        float3 xformOp:rotateXYZ (
            assetInfo = {
                dictionary grill = {
                    bool database = 1
                }
            }
        )
        float3 xformOp:rotateXYZ.timeSamples = {
            0: (12, 0, 0),
        }
        double3 xformOp:translate = (0, 2, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
    }

    def Cube "TopBackLeft" (
        doc = "Golden Krone's top back left section"
    )
    {
        double3 xformOp:translate = (-2, 6, -2)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Capsule "TopFrontLeft" (
        doc = "Golden Krone's top from left section"
    )
    {
        double3 xformOp:translate = (-2, 6, 2)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Cylinder "TopBackRight" (
        doc = "Golden Krone's top back right section"
    )
    {
        double3 xformOp:translate = (2, 6, -2)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Cone "TopFrontRight" (
        doc = "Golden Krone's top front right section"
    )
    {
        double3 xformOp:translate = (2, 6, 2)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
}

